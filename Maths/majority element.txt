Majority Element
Problem Description

Given an array of size n, find the majority element. The majority element is the element that appears more than floor(n/2) times.
You may assume that the array is non-empty and the majority element always exist in the array.

Example :

Input : [2, 1, 2]
Return  : 2 which occurs 2 times which is greater than 3/2.








public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    public int majorityElement(final int[] A) {
        int majority=0;
        int count=0;
        for(int i=0;i<A.length;i++) {
            if(count==0) {
                majority=A[i];
                count=1;
            }
            else if(majority==A[i]) {
                count+=1;
            }
            else {
                if(count>1) {
                    count-=1;
                }
                else {
                    count=0;
                    majority=0;
                }
            }
        }
        int tot=0;
        for(int i=0;i<A.length;i++) {
            if(A[i]==majority) {
                tot+=1;
            }
        }
        if(tot>=A.length/2 + 1) {
            return majority;
        }
        return -1;
    }
}
